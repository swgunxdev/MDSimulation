<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="slf" type="Slf.Config.SlfConfigurationSection, Slf"/>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog"/>
  </configSections>

  <slf>
    <factories>
      <!-- the SingleLoggerFactory allows you to specify the type of logger
             which it returns via the factory-data configuration              -->
      <factory name="debugFactory" type="Slf.Factories.SingleLoggerFactory, Slf">
        <factory-data>
          <!-- this factory will always return a DebugLogger instance -->
          <logger type="Slf.DebugLogger, Slf" />
        </factory-data>
      </factory>
      <!-- the SingleLoggerFactory allows you to specify the type of logger
             which it returns via the factory-data configuration              -->
      <factory name="consoleFactory" type="Slf.Factories.SingleLoggerFactory, Slf">
        <factory-data>
          <!-- this factory will always return a DebugLogger instance -->
          <logger type="Slf.ConsoleLogger, Slf" />
        </factory-data>
      </factory>
      <!-- configure single NLog factory, which will get all logging output -->
      <!-- Important: Set a reference to the NLog facade library to make sure it will be available at runtime -->
      <factory type="Slf.NLogFacade.NLogLoggerFactory, Slf.NLogFacade"/>
    </factories>

    <!-- configure debug logger -->
    <loggers>
      <logger factory="consoleFactory"/>
    </loggers>
  </slf>

  <!--
    configures NLog with two loggers:
    - A default logger, which logs to log-common.txt
    - A named logger ("Com.Foo.DataAccess"), which logs to log-data-access.txt
  -->
  <!-- configures NLog to write logging data to the console -->
    <nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <targets>
  <!--  NLog uses the concept of targets to indicate where log messages are written to.
            Targets can be files, the console, databases, SMTP and much more. This example
            defines a couple of different targets
      -->
      <target name="network-file" xsi:type="File"
              layout="${longdate} ${logger} ${message}"
              fileName="log-network.txt"/>

      <target name="error-file" xsi:type="File"
              layout="${longdate} ${logger} ${message}"
              fileName="log-error.txt"/>

      <target name="common-file" xsi:type="File"
              layout="${longdate} ${logger} ${message}"
              fileName="log-common.txt"/>
    </targets>


    <rules>
  <!-- only log WARN level messages or higher for loggers with the given name (or child loggers
           in the hierarchy. Note the use of the 'final' attribute, if this is not present, NLog will continue
           to match logger names, resulting in our DataAccess messages appearing in the log-common.txt
           log file also.
           NOTE: rules are evaluated in order, hence the more specific rules (with the more specific logger names)
           should appear at the start of this rule declaration.   -->

        <logger name="ErrorLogger"
              minlevel="Error"
              final="true"
              writeTo="network-file"/>

      <logger name="InfoLogger"
              minlevel="Info"
              final="true"
              writeTo="common-file"/>
  <!--  the logger element is used to identify a set of loggers which are used within the 
            application code. Within these elements it is possible to identify the target
            that writes messages sent to this logger, and specify a filter on the log level.
      -->
        <logger name="*" writeTo="common-file"/>
    </rules>
  </nlog>

</configuration>